// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test Text Analysis Fireshose Stream Creation 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": Object {
    "AssetParameters04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760ArtifactHash08821CF1": Object {
      "Description": "Artifact hash for asset \\"04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760\\"",
      "Type": "String",
    },
    "AssetParameters04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760S3Bucket8FA57995": Object {
      "Description": "S3 bucket for asset \\"04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760\\"",
      "Type": "String",
    },
    "AssetParameters04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760S3VersionKey13B573BB": Object {
      "Description": "S3 key for asset version \\"04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760\\"",
      "Type": "String",
    },
    "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6ArtifactHash9ED78A91": Object {
      "Description": "Artifact hash for asset \\"219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6\\"",
      "Type": "String",
    },
    "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3BucketEA3E742C": Object {
      "Description": "S3 bucket for asset \\"219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6\\"",
      "Type": "String",
    },
    "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76": Object {
      "Description": "S3 key for asset version \\"219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6\\"",
      "Type": "String",
    },
    "AssetParameters96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201bArtifactHash94C16DF2": Object {
      "Description": "Artifact hash for asset \\"96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201b\\"",
      "Type": "String",
    },
    "AssetParameters96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201bS3Bucket7892D665": Object {
      "Description": "S3 bucket for asset \\"96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201b\\"",
      "Type": "String",
    },
    "AssetParameters96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201bS3VersionKey774CA79B": Object {
      "Description": "S3 key for asset version \\"96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201b\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AccessLogD598EBE9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "EventBus7B8748AA": Object {
      "Properties": Object {
        "Name": "EventBus",
      },
      "Type": "AWS::Events::EventBus",
    },
    "RawBucket0C3EE094": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "TestTopicOrchestrationCheckStatusLambdaFunctionA7FE15A7": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleDefaultPolicy40B1AC57",
        "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleFC3D008E",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760S3Bucket8FA57995",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760S3VersionKey13B573BB",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters04486de86675329a689c842d3a79f8c41a493caadb94cb9e69454b0efbc3b760S3VersionKey13B573BB",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "SOURCE_PREFIX": "TWITTER",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleFC3D008E",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleDefaultPolicy40B1AC57": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleDefaultPolicy40B1AC57",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleFC3D008E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleFC3D008E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationLambdaComprehendPassPolicy21453497": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "iam:GetRole",
                "iam:PassRole",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationTopicAnalysisRoleA05A37B7",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationLambdaComprehendPassPolicy21453497",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRole9B98F733",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationLambdaDescribeJobPolicy08843BA7": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Comprehend services for Topic Detection. The Comprehend services not have a resource arn. This permission is retricted to the lambda function responsible for accessing the Amazon Comprehend service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "comprehend:DescribeTopicsDetectionJob",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationLambdaDescribeJobPolicy08843BA7",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationCheckStatusLambdaFunctionServiceRoleFC3D008E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationLambdaEventBusPolicy03772C08": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "EventBus7B8748AA",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationLambdaEventBusPolicy03772C08",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleA93DCFF6",
          },
          Object {
            "Ref": "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleCADCA216",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationLambdaSubmitJobPolicy86E8696F": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Comprehend services for Topic Detection. The Comprehend services not have a resource arn. This permission is retricted to the lambda function responsible for accessing the Amazon Comprehend service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "comprehend:StartTopicsDetectionJob",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationLambdaSubmitJobPolicy86E8696F",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRole9B98F733",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationPublishTopicMappingLambdaFunctionC85663AB": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleDefaultPolicyCCA1993C",
        "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleA93DCFF6",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3BucketEA3E742C",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "EVENT_BUS_NAME": Object {
              "Ref": "EventBus7B8748AA",
            },
            "RAW_DATA_FEED": Object {
              "Ref": "RawBucket0C3EE094",
            },
            "SOURCE_PREFIX": "TWITTER",
            "TOPICS_EVENT_NAMESPACE": "com.test.topic",
            "TOPIC_MAPPINGS_EVENT_NAMESPACE": "com.test.mappings",
          },
        },
        "Handler": "lambda_function.topic_mapping_handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleA93DCFF6",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 900,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleA93DCFF6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleDefaultPolicyCCA1993C": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "RawBucket0C3EE094",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "RawBucket0C3EE094",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleDefaultPolicyCCA1993C",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationPublishTopicMappingLambdaFunctionServiceRoleA93DCFF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationPublishTopicMappingLambdaFunctionSqsEventSourceTestTopicOrchestrationPublishTopicMappingqueueCB3900F7B3D796BD": Object {
      "Properties": Object {
        "BatchSize": 1,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "TestTopicOrchestrationPublishTopicMappingLambdaFunctionC85663AB",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TestTopicOrchestrationPublishTopicMappingdeadLetterQueue8801FDAD": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "TestTopicOrchestrationPublishTopicMappingdeadLetterQueuePolicy320AC862": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationPublishTopicMappingdeadLetterQueue8801FDAD",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationPublishTopicMappingdeadLetterQueue8801FDAD",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "TestTopicOrchestrationPublishTopicMappingdeadLetterQueue8801FDAD",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "TestTopicOrchestrationPublishTopicMappingdeadLetterQueue8801FDAD",
              "Arn",
            ],
          },
          "maxReceiveCount": 15,
        },
        "VisibilityTimeout": 7200,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "TestTopicOrchestrationPublishTopicMappingqueuePolicy75E7B202": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "TestTopicOrchestrationSubmitTopicLambdaFunctionAF8CDE7C": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRoleDefaultPolicyF32FE4DE",
        "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRole9B98F733",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201bS3Bucket7892D665",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201bS3VersionKey774CA79B",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters96bf01a1b4f3dca29fa7af6441fae753515afa82f4c202ce83be689420ab201bS3VersionKey774CA79B",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATA_ACCESS_ARN": Object {
              "Fn::GetAtt": Array [
                "TestTopicOrchestrationTopicAnalysisRoleA05A37B7",
                "Arn",
              ],
            },
            "INGESTION_S3_BUCKET_NAME": Object {
              "Ref": "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
            },
            "INGESTION_WINDOW": "2",
            "NUMBER_OF_TOPICS": "10",
            "RAW_BUCKET_FEED": Object {
              "Ref": "RawBucket0C3EE094",
            },
            "S3_BUCKET_NAME": Object {
              "Ref": "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
            },
            "SOURCE_PREFIX": "TWITTER",
            "STACK_NAME": Object {
              "Ref": "AWS::StackName",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRole9B98F733",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 600,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRole9B98F733": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRoleDefaultPolicyF32FE4DE": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "RawBucket0C3EE094",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "RawBucket0C3EE094",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRoleDefaultPolicyF32FE4DE",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationSubmitTopicLambdaFunctionServiceRole9B98F733",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionE1F9A9BF": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleDefaultPolicy469B0CAF",
        "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleCADCA216",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3BucketEA3E742C",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "EVENT_BUS_NAME": Object {
              "Ref": "EventBus7B8748AA",
            },
            "QUEUE_NAME": Object {
              "Fn::GetAtt": Array [
                "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
                "QueueName",
              ],
            },
            "RAW_DATA_FEED": Object {
              "Ref": "RawBucket0C3EE094",
            },
            "SOURCE_PREFIX": "TWITTER",
            "TOPICS_EVENT_NAMESPACE": "com.test.topic",
            "TOPIC_MAPPINGS_EVENT_NAMESPACE": "com.test.mappings",
          },
        },
        "Handler": "lambda_function.topic_terms_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleCADCA216",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 900,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleCADCA216": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleDefaultPolicy469B0CAF": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "RawBucket0C3EE094",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "RawBucket0C3EE094",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleDefaultPolicy469B0CAF",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionServiceRoleCADCA216",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionADF218D4": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRoleDefaultPolicyE4EA3CC8",
        "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRole8173FF8E",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3BucketEA3E742C",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters219cda3a65419c32ab867ca42ca4866a203eb82d37fb1d2a53ae276aefe75db6S3VersionKey73A3CB76",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "EVENT_BUS_NAME": Object {
              "Ref": "EventBus7B8748AA",
            },
            "QUEUE_NAME": Object {
              "Fn::GetAtt": Array [
                "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
                "QueueName",
              ],
            },
            "RAW_DATA_FEED": Object {
              "Ref": "RawBucket0C3EE094",
            },
            "SOURCE_PREFIX": "TWITTER",
            "TOPICS_EVENT_NAMESPACE": "com.test.topic",
            "TOPIC_MAPPINGS_EVENT_NAMESPACE": "com.test.mappings",
          },
        },
        "Handler": "lambda_function.topic_handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRole8173FF8E",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 900,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRole8173FF8E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRoleDefaultPolicyE4EA3CC8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationPublishTopicMappingqueue0E95A5DA",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRoleDefaultPolicyE4EA3CC8",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionServiceRole8173FF8E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTopicAnalysisRoleA05A37B7": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "comprehend.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationTopicAnalysisRoleDefaultPolicy7273C9AF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationTopicAnalysisRoleDefaultPolicy7273C9AF",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationTopicAnalysisRoleA05A37B7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "AccessLogD598EBE9",
          },
          "LogFilePrefix": "TestTopicOrchestration-TopicIngestion/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "TestTopicOrchestrationTopicIngestionS3BucketPolicy4681CCF5": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTopicIngestionS3Bucket953D8D57",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "TestTopicOrchestrationTopicModelWFStateMachineLogPolicyA30F4823": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationTopicModelWFStateMachineLogPolicyA30F4823",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "states.",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationTopicModelWFWorkflowEngineD9D94961": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0",
        "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleDefaultPolicy2B38430E",
        "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleC78D5F5C",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"Submit\\",\\"States\\":{\\"Submit\\":{\\"Next\\":\\"JobSubmitted?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"SubmitTopicTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"HeartbeatSeconds\\":900,\\"OutputPath\\":\\"$.Payload\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationSubmitTopicLambdaFunctionAF8CDE7C",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"JobSubmitted?\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"Check if the topic modeling job is submitted\\",\\"InputPath\\":\\"$\\",\\"Choices\\":[{\\"Variable\\":\\"$.JobStatus\\",\\"StringEquals\\":\\"NO_DATA\\",\\"Next\\":\\"NoData\\"},{\\"Variable\\":\\"$.JobStatus\\",\\"StringEquals\\":\\"FAILED\\",\\"Next\\":\\"SubmitFailed\\"}],\\"Default\\":\\"Check Status\\"},\\"Check Status\\":{\\"Next\\":\\"JobComplete?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"CheckStatusTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"HeartbeatSeconds\\":900,\\"InputPath\\":\\"$\\",\\"OutputPath\\":\\"$.Payload\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationCheckStatusLambdaFunctionA7FE15A7",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Wait\\":{\\"Type\\":\\"Wait\\",\\"Seconds\\":600,\\"Next\\":\\"Check Status\\"},\\"JobComplete?\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"Check if the topic modeling job is complete\\",\\"InputPath\\":\\"$\\",\\"Choices\\":[{\\"Variable\\":\\"$.JobStatus\\",\\"StringEquals\\":\\"COMPLETED\\",\\"Next\\":\\"PublishTopic\\"},{\\"Variable\\":\\"$.JobStatus\\",\\"StringEquals\\":\\"IN_PROGRESS\\",\\"Next\\":\\"Wait\\"},{\\"Variable\\":\\"$.JobStatus\\",\\"StringEquals\\":\\"SUBMITTED\\",\\"Next\\":\\"Wait\\"}],\\"Default\\":\\"JobFailed\\"},\\"JobFailed\\":{\\"Type\\":\\"Fail\\"},\\"PublishTopic\\":{\\"Type\\":\\"Parallel\\",\\"Comment\\":\\"Parallely process various platform types\\",\\"End\\":true,\\"InputPath\\":\\"$\\",\\"OutputPath\\":\\"$\\",\\"Branches\\":[{\\"StartAt\\":\\"PublishTopicForTWITTER\\",\\"States\\":{\\"PublishTopicForTWITTER\\":{\\"Type\\":\\"Parallel\\",\\"Comment\\":\\"Parallely process topic inferences for TWITTER\\",\\"End\\":true,\\"InputPath\\":\\"$\\",\\"OutputPath\\":\\"$\\",\\"Branches\\":[{\\"StartAt\\":\\"Publish Topic Terms for TWITTER\\",\\"States\\":{\\"Publish Topic Terms for TWITTER\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"TWITTERPublishTopicTermsTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"HeartbeatSeconds\\":900,\\"OutputPath\\":\\"$.Payload\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionE1F9A9BF",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"TWITTERPublishTopicTermsTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"}}},{\\"StartAt\\":\\"Publish Topics for TWITTER\\",\\"States\\":{\\"Publish Topics for TWITTER\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"TWITTERPublishTopicsTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"HeartbeatSeconds\\":900,\\"OutputPath\\":\\"$.Payload\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionADF218D4",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"TWITTERPublishTopicsTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"}}}]}}}]},\\"CheckStatusTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"},\\"NoData\\":{\\"Type\\":\\"Fail\\"},\\"SubmitFailed\\":{\\"Type\\":\\"Fail\\"},\\"SubmitTopicTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleC78D5F5C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "TestTopicOrchestrationTopicModelWFWorkflowEngineEventsRole086D2595": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationTopicModelWFWorkflowEngineEventsRoleDefaultPolicyFF7DB817": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "TestTopicOrchestrationTopicModelWFWorkflowEngineD9D94961",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationTopicModelWFWorkflowEngineEventsRoleDefaultPolicyFF7DB817",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationTopicModelWFWorkflowEngineEventsRole086D2595",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleC78D5F5C": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleDefaultPolicy2B38430E": Object {
      "DependsOn": Array [
        "TestTopicOrchestrationTopicModelWFStateMachineRole30F829E0",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W76",
              "reason": "The statemachine invokes multiple lambdas and the policy is narrowed down to the specific lambda resource arn. Hence it has multiple policy statements resulting in a higher SPCM value",
            },
            Object {
              "id": "W12",
              "reason": "The \\"LogDelivery\\" actions do not support resource-level authorization",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationSubmitTopicLambdaFunctionAF8CDE7C",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationSubmitTopicLambdaFunctionAF8CDE7C",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationCheckStatusLambdaFunctionA7FE15A7",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationCheckStatusLambdaFunctionA7FE15A7",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionE1F9A9BF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTWITTERPublishTopicTermsLambdaFunctionE1F9A9BF",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionADF218D4",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TestTopicOrchestrationTWITTERPublishTopicsLambdaFunctionADF218D4",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleDefaultPolicy2B38430E",
        "Roles": Array [
          Object {
            "Ref": "TestTopicOrchestrationTopicModelWFWorkflowEngineRoleC78D5F5C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TestTopicOrchestrationTopicSchedule5DE8B730": Object {
      "Properties": Object {
        "ScheduleExpression": "(5 */2 * * ? *)",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "TestTopicOrchestrationTopicModelWFWorkflowEngineD9D94961",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "TestTopicOrchestrationTopicModelWFWorkflowEngineEventsRole086D2595",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
  },
}
`;
